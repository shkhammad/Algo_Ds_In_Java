# GREEDY

Greedy algorithms involves selecting the most profitable piece at a given moment.
It also involves sorting.

1. COIN CHANGING (CASHIERS ALGORITHM):
 
Here, at each iteration add coin of the largest value that
does not take us past the amount to be paid.
However, this greedy algo is not optimal. We use DP instead for
the optimal solution.

SORT n coin denominations so that 0 < c1 < c2 < ... < cn.
S ← ∅.
WHILE (x > 0)
 
 k ← largest coin denomination ck such that ck ≤ x.
 
 IF (no such k)
 RETURN “no solution.”
 ELSE
 x ← x – ck.
 S ← S ∪ { k }

RETURN S

2. Interval Scheduling:

Here, we sort the jobs by the earliest finish time(also move the start time --> corresponding
to the finish time)
Consider the following intervals (start time - finish time),
12-25, 20-30, 10-20
Sorting the intervals by the finish time(ascending order),
10-20, 12-25, 20-30
If the ending time is the same we pick up the meeting with the minumum
starting time
The starting time of the next meeting should be greater than (or equal) the ending time
of the last meeting
ALGORITHM:
SORT jobs by finish times and renumber so that f1 ≤ f2 ≤ … ≤ fn.
S ← ∅.
FOR j = 1 TO n
 IF (job j is compatible with S)
 S ← S ∪ { j }.
RETURN S

CODE:

    int start[] = {75250, 50074, 43659, 8931, 11273, 27545, 50879, 77924};
    int end[] = {112960, 114515, 81825, 93424, 54316, 35533, 73383, 160252};
    int i,j=0,k=0,n=start.length,p=0,ct=1,val=Integer.MAX_VALUE;
    
    //Here, we created an array of pairs(user-defined type)
    Pair arr[]  = new Pair[n];
    for(i=0;i<n;i++){
	arr[i] = new Pair(start[i],end[i],i+1);
    }
	
    Compare obj = new Compare();
    obj.compare(arr,n);

      for(i=1;i<n;i++){
            if(i<n-1 && arr[i].y == arr[i+1].y ){
				
				j = i;
				
				while(j<n-1 && arr[j].y == arr[j+1].y){
					
					out.println(arr[j].x + " " + arr[j+1].x);	
					if(arr[j].x>=arr[k].y && arr[j+1].x>=arr[k].y){
					
					if(arr[j].x <=arr[j+1].x){
					if(arr[j].x <=val){
					p = j;
					val = arr[j].x;
					}
					}
					
					else{
					if(arr[j+1].x<=val){
					p = j +1;
					val = arr[j+1].x;
					}
				   }
					
					}
					
					else if(arr[j].x>=arr[k].y){
						if(arr[j].x <=val){
						p = j;
						val = arr[j].x;
					  }
					}
					
					else if(arr[j+1].x>=arr[k].y){
						if(arr[j+1].x <=val){
						p = j+1;
						val = arr[j+1].x;
					  }
					}
					j++;
					out.println(p);
					}
				
				if(p>0){
					ct++;
					//out.println(ct);
					k = p;
					i=j;
					val = Integer.MAX_VALUE;
				}
				p=0;	
			}
            else if(arr[i].x>=arr[k].y){
                ct++;
                k = i;
            }
            //out.println(ct);
       }
    //out.println(val);   
    out.println(ct);

//Here we created a class pair 
class Pair{
    int x,y,c;
    public Pair(int x, int y, int c){
        this.x = x;
        this.y = y;
        this.c = c;
    }
}

//Here we use anonymous classes (refer oracle docs), here we declare and instantiate the class
Comparator(interface) at the same time, instead of implementing this method
with a new class, here we pass the whole expression of comparator class (overriding
the compare method of the interface)
to the Arrays.sort function	
//If the returned value is positive we sort or exchange else if negative or
zero it remains the same
class Compare{
    static void compare(Pair arr[], int n) 
    { 
        // Comparator to sort the pair according to second element 
        Arrays.sort(arr, new Comparator<Pair>() { 
            @Override public int compare(Pair p1, Pair p2) 
            { 
                //increasing order(positive value)
                return p1.y - p2.y; 
            } 
        }); 
    }
}	

3. Interval Partioning:

Here we sort the jobs by their earliest start time and allocates them to the 
class available(earliest start time first)
Here we have the number of classrooms available, if it is not fitting 
in any of the present classrooms we make a new one and fit into it
and make a track on the number of classrooms (intial + newly created)

ALGORITHM:

SORT lectures by start times and renumber so that s1 ≤ s2 ≤ … ≤ sn.
d ← 0.
FOR j = 1 TO n
 IF (lecture j is compatible with some classroom)
 Schedule lecture j in any such classroom k.
 ELSE
 Allocate a new classroom d + 1.
 Schedule lecture j in classroom d + 1.
 d ← d + 1.
RETURN schedule.

4. Job Scheduling (sequencing):
Sometimes in job problems, to minimize loss the ratio of loss/time should be minimized, ie
sort in increasing order by the ratio of l/t

In some problems, for example the below one we have pure greedy approach, in
job deadline problem, we have to maximise the profits so sort in decreasing order(the profits) using 
comparotor interface, and try to complete it before deadline by iterating through the entire jobs.
We maintain an slots array of boolean type and length n (jobs), were we mark all the jobs do be done
before deadline in decreasing order of the profits, if found some slots we mark
and then break in decreasing manner, if we dont find any empty slots we continue
with the next value (iteration).

CODE:
int dead[] = {2,1,2,1,3};
int profit[] = {100,19,27,25,15};
    
	int i,j,n = dead.length;
	//res contain total number of jobs and max profit gained
	int res[] = new int[2];
	//for marking the jobs before deadline in order of max profit
	boolean slots[] = new boolean[n];
	Job arr[]  = new Job[n];
	for(i=0;i<n;i++){
		arr[i] = new Job(i+1,dead[i],profit[i]);
	}
	
	Compare obj = new Compare();
	obj.compare(arr,n);
	
	//intially all slots are empty     	
	for(i=0;i<n;i++)
	slots[i] = false;
	
	for(i=0;i<n;i++){
		//the deadline cannot exceed the length of the slots array so it is max upto n (-1)
		//-1 for before the deadline
		//we iterate backwards (efficient as well) because we want to finish the job 
		as late as possible (sort of just a day before type (end moment))-->greedy
		//if we iterate normally from 0 to n then alloting the slots earlier will not have
		any advantage as well as it will prevent any job having more profit to occupy the slots (if the deadline is earlier),
		therefore we will finish the jobs just before the deadline towards -->0
		for(j=Math.min(n,arr[i].dead)-1;j>=0;j--){
			//check if empty
			if(slots[j] == false){
				res[0]++;
				res[1]+=arr[i].profit;
				//mark the job
				slots[j] = true;
				break;
			}
		}
	} 	
	out.println(Arrays.toString(res));

//Job - user defined class
class Job{
    int id,dead,profit;
    public Job(int id, int dead, int profit){
        this.id = id;
        this.dead = dead;
        this.profit = profit;
    }
}

//Class for using the comparator interface for sorting the jobs
in decreasing order of profit
class Compare{
    static void compare(Job arr[], int n) 
    { 
        Arrays.sort(arr, new Comparator<Job>() { 
            @Override public int compare(Job j1, Job j2) 
            { 
		//decreasing order
                return j2.profit - j1.profit; 
            } 
        }); 
    }
}

5. Three Increasing - TC - 250pt:

CODE:
public class ThreeIncreasing{
    public int minEaten(int a, int b, int c){
      int res=0,temp=0;
	  if(b>=c){
			temp = b -(c-1);
			b  = b - temp;
			res = res + temp;
			if(b == 0) return -1;
			if(a>=b){
				temp  = (a - (b-1));
				a = a - temp;
				res = res + temp;
				if(a == 0) return -1;
			} 
	  }
	  else if(a>=b){
				temp  = (a - (b-1));
				a = a - temp;
				res = res + temp;
				if(a == 0) return -1;
	  }
	  return res;
    }
}

6. Binary Calculator - TC - 250pt:

CODE:
public class BinaryCalculator{
    public int minimumSteps(int a, int b){
      int res = 0;
      if(a == b) return 0;
	  
	  if(a<b){
		  while(a!=b){
			   if(a<b)
			   a+=3;
			   else if(a>b && ((a%2 != 0 && b%2 == 0) || (a%2 == 0 && b%2 != 0)))
			   a+=3;
			   else a-=2;
			   ++res;
		  }	
	  }
	  
	  else{
		  while(a!=b){
			   if(a>b)
			   a-=2;
			   else if(a<b && (a+3) != b)
			   a-=2;
			   else a+=3;
			   ++res;	
		  }
	  }

	  return res;
    }
}

7. Soldier and Badges - CF - 1200pt:

CODE:
public static int helperFunction(int n, int a[]){
	  //Long range is -10^18 to 10^18
	  int i,res = 0;
	  HashSet<Integer> st = new HashSet<>();
	  Arrays.sort(a);
	  			
	  for(i=0;i<n-1;i++){
			if(a[i] == a[i+1] || st.contains(a[i+1])){
				res += (a[i] + 1) - a[i+1];
				a[i+1] = a[i] + 1;
			}	
			st.add(a[i]);
	  }		
			
	  return res;		
}

8. Boats Competition - CF - 1200pt:

CODE:
public static int helperFunction(){
	  //Long range is -10^18 to 10^18
	  
	  int n = in.nextInt();
	  int w[] = new int[n];
	  
	  int i,ct=0,res=Integer.MIN_VALUE;
	  
	  for(i=0;i<n;i++)
	  w[i] = in.nextInt();
	  
	  //HashMap<Integer,Integer> mp = new HashMap<>();
	  
	  //s can range from 2 to 2n
	  //which is all the possible weights of the boat (2 person)
	  
	  
	  for(i=2;i<=2*n;i++){
		  int mp[] = new int[n+1];
		  for(int val: w){
			  if(i>val && i-val<=n && mp[i-val] > 0){
				  --mp[i-val];
				  ++ct;	
			  }
			  else{
				  ++mp[val];
			  }	
		  }
		  res = Math.max(ct,res);	
		  ct = 0;
	  }
	  
	  return res;		
}

9. Maximum Number - CF - 1200pt:

CODE:
public static void helperFunction(int n){
	  //Long range is -10^18 to 10^18 and is 64 bit
	  //Integer in java is 32 bit
	  
	  //take the smallest number and sum it up with res
	  
	  StringBuilder res = new StringBuilder("");
	  
	  int i;
	  
	  if(n%2 == 0){
		  for(i=0;i<n/2;i++)
		  res.append("1");
		
	  }
	  
	  else{
		  res.append("7");
		  
		  n-=3;
		  
		  for(i=0;i<n/2;i++)
		  res.append("1");
	  }
	  
	  out.println(res);	
}

10. Chief Hopper - HR - Hard:

CODE:
public static int chiefHopper(List<Integer> arr) {
        
        int i,n=arr.size();
        int res = 0;
        
        //it can be odd or even 
        //if it is even then no problem
        //but if it is odd then we make it even by adding 1 to it
        //works for both odd and even
        
	for(i=n-1;i>=0;i--){
            res = (res + arr.get(i)+1)/2;
        }        
        
        return  res;
}

11. Tomek Phone - TC - 500pt:

CODE:
//O(nlogn)

import java.util.*;
public class TomekPhone{
    public int minKeystrokes(int[] frequencies, int[] keySizes){
      int i,n=keySizes.length,m=frequencies.length,sum=0,j,res=0,temp=1;
	  for(i=0;i<n;i++)	sum+=keySizes[i];
	  if(sum<m) return -1;
	  
	  Arrays.sort(frequencies);
	  
	  Arrays.sort(keySizes);
	  
	  i=0;
	  
	  for(j=m-1;j>=0;j--){
		  if(keySizes[i]>0){
			res = res + (frequencies[j] * temp);
			--keySizes[i];
		  }
		  else{
			  while(keySizes[i]<=0)
			  ++i;
			  --keySizes[i];	
		  	  res = res + (frequencies[j] * temp);
		  }
		  if(i<n-1)
				i++;
		  else {
			  i = 0;	
			  ++temp;	
		  }
	  }
	  
	  return res;
    }
} 

12. Alice Game Easy - TC - 500pt:

CODE:
public class AliceGameEasy{
	public long findMinimumValue(long x, long y){
      	  long t = x+y,n=0;
	  

	  //sqrt(n) complexity
	  // n*n < t
	  //n < sqrt(t)
	  //so the complexity is sqrt(t)
	  
	  while((n*(n+1))/2 <t)
		++n;
	  
	  if((n*(n+1)/2) > t)
		return -1;
	  
          long misum=0,masum=0;  
        
	  for(int i=0;i<=n;i++){
          	if(misum<=x && x<=masum)
              	return i;
      	
          	misum+=i+1;
          	masum+=n-i;
      	  }
          
	  return -1;  
       }
}

13. Rockstar - TC - 500pt:

CODE:
public class RockStar{
	public int getNumSongs(int ff, int fs, int sf, int ss){
		if(ff+fs>0){
			if(fs == 0) return ff;
			else if(sf>=fs) return ff + 2*fs +ss;
			else return ss + 2*sf + ff + 1;
		}
		return ss + Math.min(sf,1);
	}
} 

14. Drazil and Factorial - CF - 1400pt:

CODE:
public static void helperFunction(int n, StringBuilder st){
	  //Long range is -10^18 to 10^18 and is 64 bit
	  //Integer in java is 32 bit
	 
	  
	  StringBuilder res = new StringBuilder("");
	  
	  int i, mp[] = new int[10];
	  
	  mp[2] = 2;
	  mp[3] = 3;
	  mp[4] = 322;
	  mp[5] = 5;
	  mp[6] = 53;
	  mp[7] = 7;
	  mp[8] = 7222;
	  mp[9] = 7332;
	  
	  
	  for(i=0;i<n;i++){
		  
		  if(st.charAt(i) != '0' && st.charAt(i) != '1')
		  res.append(mp[Character.getNumericValue(st.charAt(i))]);
	  }
	   
          char temp[] = res.toString().toCharArray();
      
          Arrays.sort(temp);
      
          StringBuilder fres = new StringBuilder();
      
          fres.append(temp);
      
          out.println(fres.reverse());
}
 
15. Exams - CF - 1400pt:

CODE:

public static int helperFunction(int n){
	  //Long range is -10^18 to 10^18 and is 64 bit
	  //Integer in java is 32 bit
	 
	  int i,temp=0;
	  
	  Pair p[] = new Pair[n];
	  
	  for(i=0;i<n;i++)
	  p[i] = new Pair(in.nextInt(),in.nextInt());
		
		
		  Arrays.sort(p, new Comparator<Pair>(){
		  
		  @Override
		  public int compare(Pair p1, Pair p2){
			  if(p1.x == p2.x){
				if(p1.y == p2.y)
				return 0;
				
				else if(p1.y > p2.y)
				return 1;
				
				return -1;
		      }
		      
		      
			  if(p1.x > p2.x)
			  return 1;
			  
			  return -1;
					
		  }
	  });
	  
	  for(i=0;i<n;i++){
		  
		  if(temp<=p[i].x && temp<=p[i].y)
		  temp = Math.min(p[i].x,p[i].y);
		  
		  else if(temp<=p[i].x)
		  temp = p[i].x;
		  
		  else if(temp<=p[i].y)
		  temp = p[i].y;
	  }
	  
	  return temp;
} 

16. Element Extermination - CF - 1400pt:

CODE:
public static String helperFunction(int n){
	  //Long range is -10^18 to 10^18 and is 64 bit
	  //Integer in java is 32 bit
	  
	  int i;
	  int a[] = new int[n];
	  
	  for(i=0;i<n;i++)
	  a[i] = in.nextInt();
	  
	  if(a[0] < a[n-1]) return "YES";
	  
	  return "NO"; 
}

17. Universal Solution - CF - 1400pt:

CODE:
public static String helperFunction(){
	  //Long range is -10^18 to 10^18 and is 64 bit
	  //Integer range is ~~ -2 * 10^9(-2^31) to 2 * 10^9(2^31 - 1) and is 32 bit  
	  
	  String s = in.next();
	  
	  StringBuilder st = new StringBuilder(s);
	  
	  StringBuilder res = new StringBuilder("");
	  
	  int i,n=st.length(),temp = Integer.MIN_VALUE,index=-1;
	 
	  //R --> 0
	  //P --> 1
	  //S --> 2
	 
	  int mp[] = new int[3]; 
	  
	  for(i=0;i<n;i++){
		  if(st.charAt(i) == 'R')
			++mp[0];
		  
		  else if(st.charAt(i) == 'P')
			++mp[1];
		  
		  else 
			++mp[2];
	  }
	  
	  for(i=0;i<3;i++){
		  if(temp < mp[i]){
			temp = mp[i];
	        index  = i;
	      }
	  }
	  
	  if(index == 0){
		  for(i=0;i<n;i++)
		  res.append('P');
	  }
	  
	  else if(index == 1){
		  for(i=0;i<n;i++)
		  res.append('S');
	  }
	  
	  else{
		  for(i=0;i<n;i++)
		  res.append('R');
	  }
	  
	  return res.toString();
}

18. Partition Labels - LC - Medium:

CODE:
class Solution {
    public List<Integer> partitionLabels(String s) {
        List<Integer> ls = new ArrayList<>();
        
        //a--z --> 0-->25
        int mp[] = new int[26];
        
        
        int i,n=s.length(),j=n-1,ct=0,temp=0,ptemp=0;
        
        //last occurrence of every alphabet in the string
        for(i=0;i<n;i++)
            mp[s.charAt(i)-'a'] = i;
        
        for(i=0;i<n;i++){
            if(mp[s.charAt(i) - 'a'] > temp)
                temp = mp[s.charAt(i) - 'a'];
                
            if(i == temp){
                ls.add(temp+1 - ptemp);
                ptemp = temp+1;
            }
        }
        return ls;
    }
}

19. Minimum Deletion Cost to Avoid Repeating Letters - LC - Medium:

CODE:
class Solution {
    public int minCost(String s, int[] cost) {
        int i,j=0,n=s.length(),rs=0,res=0,max=0;
        for(i=0;i<n-1;i++){
            if(s.charAt(i) == s.charAt(i+1)){
                while(i<n-1 && s.charAt(i) == s.charAt(i+1)){
                    rs += cost[i];
                    if(max<=cost[i]) max = cost[i];
                    i++;
                }
                rs+=cost[i];
                if(max<=cost[i]) max = cost[i];
            }
            res = res+(rs-max);
            max=0;
            rs=0;
        }
        return res;
    }
}

20. Task Scheduler - LC - Medium:

CODE:
class Solution {
    public int leastInterval(char[] tasks, int n) {
        //here we want to minimize the total idle slots possible
        
        int mp[] = new int[26];
        for(char c: tasks)
            ++mp[c-'A'];
        
        Arrays.sort(mp);     
        
        //total intervals/gaps/cooldown that are present
        int tinterval = mp[25] - 1;
        //intervals/gaps/cooldown period having max idle slots possible
        int idle_slots = tinterval * n;
        
        //filling the idle slots with remaining tasks from decreasing order of occurrence
        //if the there are same number (count) of two tasks, either of them can come after the next one in the last interval
        
        for(int i=24;i>=0;i--)
            idle_slots-=Math.min(mp[i],tinterval);
            
        return idle_slots>0 ? idle_slots+tasks.length : tasks.length;
    }
}

21. Jump Game - LC - Medium:

CODE:
class Solution {
    public boolean canJump(int[] nums) {
        int i,n=nums.length,max = 0;
        for(i=0;i<n;i++){
            if(i>max)
               return false; 
            max = Math.max(nums[i]+i,max);    
        }
        return true;
    }
}

22. Jump Game - 2 - LC - Medium:

CODE:
class Solution {
    public int jump(int[] nums) {
        int i,n=nums.length,ct=0,end=0,max_end=0;
        for(i=0;i<n-1;i++){
            max_end = Math.max(nums[i]+i,max_end);
            if(i == end){
                ++ct;
                end = max_end;
            }
            if(end >= n-1) break;
        }
        return ct;
    }
}
 
